####################################################################
# WhiteSource Unified-Agent generated configuration file
####################################################################
########################################################
# GENERAL SCAN MODE: Files and Package Managers
########################################################


###########
# General #
###########
#updateType=APPEND
#ignoreSourceFiles=true
#scanComment=
failErrorLevel=ALL
#requireKnownSha1=false
log.level=debug
offline=false
#generateProjectDetailsJson=true
#generateScanReport=true
#scanReportTimeoutMinutes=10
#scanReportFilenameFormat=
#analyzeFrameworks=true
#analyzeFrameworksReference=
#updateEmptyProject=false
#log.files.level=
#log.files.maxFileSize=
#log.files.maxFilesCount=
#log.files.path=

############
# Policies #
############
checkPolicies=false
forceCheckAllDependencies=false
forceUpdate=false
forceUpdate.failBuildOnPolicyViolation=false
#updateInventory=false



resolveAllDependencies=false
archiveExtractionDepth=7
followSymbolicLinks=false
npm.resolveDependencies=true
## Prestep to gather any missing dependencies that are not installed
npm.runPreStep=true
#npm.yarnProject=true
#npm.ignoreSourceFiles=false
## Included any Dev dependencies
#npm.includeDevDependencies=true
## Ignore any npm ls errors from missing dependencies
npm.ignoreNpmLsErrors=true
## Do not execute any npm scripts 
npm.ignoreScripts=true
## Token access login to registry
#npm.accessToken=
## resolve libraries and dependencies only by package.json
npm.identifyByNameAndVersion=true
#npm.yarn.frozenLockfile=true
#npm.resolveMainPackageJsonOnly=true
npm.removeDuplicateDependencies=true
npm.resolveAdditionalDependencies=true
#npm.failOnNpmLsErrors=
#npm.projectNameFromDependencyFile=true
## Resolve npm pacakges that are already installed in a Docker image
#npm.resolveGlobalPackages=true

#------------------------------------------------------------------------
#------------------------ Fill in the parameters ------------------------
#------------------------------------------------------------------------

##apiKey=48bd1e00149940b78447f9eaf7c534111a2e920b171a4bd19715aac67aff1b2e
apiKey=96e549ba-fb92-4f0c-8384-5be71b6af8f3
#Unique identifier of the organization. It can be retrieved from the 'Integrate' page in your WhiteSource account

productName=npm-product
#Name of the product to create or update

projectName=nav-npm-test2-from-gh
#Name of the project to create or update

##wss.url=https://app.whitesourcesoftware.com/agent
wss.url=https://saas.whitesourcesoftware.com/agent
#URL to send the request to. Use the 'WhiteSource Server URL' which can be retrieved from your 'Profile' page on the 'Server URLs' panel. Then, add the '/agent' path to it, 
#For example: "https://<domain>.whitesourcesoftware.com/agent".

#projectTag=
#Project tag, to refer to another project and apply the policies from there

#projectToken=
#Unique identifier of the project to update. It can be retrieved from the 'Integrate' page in your WhiteSource account

#---------------- File name patterns to search ----------------
#includes=**/*.*
includes=**/.jar **/.tgz **/.js
